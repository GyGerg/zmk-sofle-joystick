#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    tap_dance_e: tap_dance_e {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_E";
        #binding-cells = <0>;
        bindings = <&kp E>, <&kp SEMI>;

        tapping-term-ms = <200>;
    };

    tap_dance_i: tap_dance_i {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_I";
        #binding-cells = <0>;
        bindings = <&kp I>, <&kp NUBS>;

        tapping-term-ms = <200>;
    };

    tap_dance_u: tap_dance_u {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_U";
        #binding-cells = <0>;
        bindings = <&kp U>, <&kp RIGHT_BRACKET>;

        tapping-term-ms = <200>;
    };

    tap_dance_o: tap_dance_o {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_O";
        #binding-cells = <0>;
        bindings = <&kp O>, <&kp EQUAL>;

        tapping-term-ms = <200>;
    };

    tap_dance_alt: tap_dance_alt {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_ALT";
        #binding-cells = <0>;
        bindings = <&kp LALT>, <&kp RALT>;

        tapping-term-ms = <200>;
    };

    holdtap_2: holdtap_2 {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLDTAP_2";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <120>;
        require-prior-idle-ms = <100>;
        quick-tap-ms = <0>;
    };

    tap_dance_a: tap_dance_a {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_A";
        #binding-cells = <0>;
        bindings = <&kp A>, <&kp APOS>;

        tapping-term-ms = <200>;
    };

    motog_layer: motog_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "MOTOG_LAYER";
        bindings = <&mo>, <&tog>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };

    tap_num_navi: tap_num_navi {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_NUM_NAVI";
        #binding-cells = <0>;
        bindings = <&numpad_numlock>, <&mo 4>;

        tapping-term-ms = <500>;
    };

    tap_hun_o: tap_hun_o {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_HUN_O";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp LEFT_BRACKET>;

        tapping-term-ms = <200>;
    };

    tap_hun_u: tap_hun_u {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_HUN_U";
        #binding-cells = <0>;
        bindings = <&kp MINUS>, <&kp NUHS>;

        tapping-term-ms = <200>;
    };

    combos {
        compatible = "zmk,combos";

        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <38 51>;
            slow-release;
            layers = <0 3 1>;
        };

        toggle_controls {
            bindings = <&tog 5>;
            key-positions = <60 12 56 0>;
            layers = <0 5>;
            require-prior-idle-ms = <200>;
            timeout-ms = <100>;
            slow-release;
        };

        proglayer_tog {
            bindings = <&motog_layer 3 3>;
            key-positions = <56 39>;
            slow-release;
            layers = <0 3>;
        };

        toggle_gaming {
            bindings = <&tog 1>;
            key-positions = <56 14 15 16>;
            slow-release;
            layers = <1 0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
        };

        homerow_lshift {
            bindings = <&sk LSHIFT>;
            key-positions = <27 28>;
            layers = <0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        homerow_lctrl {
            bindings = <&sk LCTRL>;
            key-positions = <28 29>;
            layers = <0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        hoemrow_lctrl_lshift {
            bindings = <&sk LS(LCTRL)>;
            key-positions = <27 28 29>;
            layers = <0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        homerow_rctrl {
            bindings = <&sk RCTRL>;
            key-positions = <36 35>;
            layers = <0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        homerow_rshift {
            bindings = <&sk RSHIFT>;
            key-positions = <36 37>;
            layers = <0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        homerow_rctrl_rshift {
            bindings = <&sk RS(RCTRL)>;
            key-positions = <35 36 37>;
            layers = <0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        prog_eq {
            bindings = <&kp LS(N7)>;
            key-positions = <14 16>;
            layers = <0 3>;
            require-prior-idle-ms = <100>;
            timeout-ms = <30>;
            slow-release;
        };
    };

    behaviors {
    };

    macros {
        numpad_numlock: numpad_numlock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp KP_NUMLOCK>,
                <&macro_press>,
                <&mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&kp KP_NUMLOCK>;

            label = "NUMPAD_NUMLOCK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC     &kp GRAVE     &kp N1        &kp N2          &kp N3         &kp N4       &kp UP_ARROW     &kp N5         &kp NUMBER_6  &kp N7          &kp N8           &kp N9             &tap_hun_o
&kp TAB     &kp Q         &kp W         &tap_dance_e    &kp R          &kp T        &kp DOWN_ARROW   &kp Y          &tap_dance_u  &tap_dance_i    &tap_dance_o     &kp P              &tap_hun_u
&kp CAPS    &tap_dance_a  &kp S         &kp D           &kp F          &kp G        &kp LEFT_ARROW   &kp H          &kp J         &kp K           &kp L            &kp SEMI           &kp APOS
&kp LSHFT   &kp Z         &kp X         &kp C           &kp V          &kp B        &kp RIGHT_ARROW  &kp N          &kp M         &kp COMMA       &kp DOT          &kp FSLH           &kp ENTER
&kp C_MUTE  &kp LCTRL     &kp LEFT_GUI  &tap_dance_alt  &tap_num_navi  &kp SPACE    &kp ENTER        &kp BACKSPACE  &kp DELETE    &tap_dance_alt  &kp RIGHT_SHIFT  &kp LC(BACKSPACE)
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "base_layer";
        };

        gaming {
            display-name = "gaming";
            bindings = <
&kp ESC     &kp N0     &kp N1        &kp N2          &kp N3  &kp N4       &kp UP_ARROW     &kp N5    &kp NUMBER_6  &kp N7          &kp N8           &kp N9             &kp BACKSPACE
&kp TAB     &kp Q      &kp W         &kp E           &kp R   &kp T        &kp DOWN_ARROW   &kp Y     &kp U         &kp I           &kp O            &kp P              &kp BSLH
&kp CAPS    &kp A      &kp S         &kp D           &kp F   &kp G        &kp LEFT_ARROW   &kp H     &kp J         &kp K           &kp L            &kp SEMI           &kp APOS
&kp LSHFT   &kp Z      &kp X         &kp C           &kp V   &kp B        &kp RIGHT_ARROW  &kp N     &kp M         &kp COMMA       &kp DOT          &kp FSLH           &kp ENTER
&kp C_MUTE  &kp LCTRL  &kp LEFT_GUI  &tap_dance_alt  &mo 4   &kp SPACE    &kp ENTER        &kp BSPC  &kp DEL       &tap_dance_alt  &kp RIGHT_SHIFT  &kp LC(BACKSPACE)
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        numpad {
            bindings = <
&trans  &trans     &trans    &trans     &trans  &trans    &trans  &trans                                               &trans     &kp KP_DIVIDE                &kp KP_MULTIPLY  &holdtap_2 LS(SLASH) LS(KP_MINUS)  &trans
&trans  &kp RA(B)  &kp UP    &kp RA(N)  &trans  &trans    &trans  &holdtap_2 KP_RIGHT_PARENTHESIS KP_LEFT_PARENTHESIS  &kp KP_N7  &kp KP_N8                    &kp KP_N9        &kp KP_PLUS                        &trans
&trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans  &trans    &trans  &trans                                               &kp KP_N4  &kp KP_N5                    &kp KP_N6        &kp KP_EQUAL                       &trans
&trans  &trans     &trans    &trans     &trans  &trans    &trans  &trans                                               &kp KP_N1  &kp KP_N2                    &kp KP_N3        &trans                             &trans
&trans  &trans     &trans    &trans     &trans  &trans    &trans  &trans                                               &trans     &holdtap_2 RA(PERIOD) RA(M)  &kp KP_N0        &kp KP_DOT
            >;

            sensor-bindings = <&inc_dec_kp 0 0>;
        };

        coding {
            bindings = <
&trans  &trans                           &trans                  &trans                  &trans                      &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &holdtap_2 RA(COMMA) LS(PERIOD)  &trans                  &kp LS(PERIOD)          &kp LS(N7)                  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &holdtap_2 LS(N9) LS(N8)         &holdtap_2 RA(N) RA(B)  &holdtap_2 RA(F) RA(G)  &holdtap_2 RA(COMMA) RA(M)  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                           &trans                  &trans                  &trans                      &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                           &trans                  &trans                  &trans                      &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navi {
            bindings = <
&kp F1      &kp F2           &kp F3          &kp F4           &kp F5           &kp F6             &mmv MOVE_UP     &kp F7           &kp F8           &kp F9      &kp F10    &kp F11           &kp F12
&trans      &mkp LCLK        &mkp MCLK       &mkp RCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "navi";
            sensor-bindings = <&scroll_encoder>;
        };

        kb_controls {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans  &trans  &trans      &trans     &trans       &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &trans      &trans     &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
